pipeline {
agent any

    stages {
        stage('Create Image') {            
            steps {
		
	                sh """
	                pwd
	                ls
	                docker images
	                docker build -t dsahoo165/node_api_mongo:${env.BUILD_NUMBER} .
	                docker images
	                """
			            stash name: 'build-artifacts', includes: '**/*', excludes: 'workspace**' 
			            withCredentials([usernamePassword(credentialsId: 'docker-hub-credentials', usernameVariable: 'DOCKER_USERNAME', passwordVariable: 'DOCKER_PASSWORD')]) {                
	                     sh 'docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD'                    
	                     // #Commented to avoid un-necessary push
	                     sh "docker push dsahoo165/node_api_mongo:${env.BUILD_NUMBER}"
	
	                }
		
            }            
        }
        stage('Run Image') {
            steps {  
	            dir("workspace"){	 
                
                sh """
                docker ps 
                docker compose down
                
                export IMAGE=dsahoo165/node_api_mongo
                export TAG=${env.BUILD_NUMBER}
                export PORT_TO_RUN=8081
                docker compose up -d

                docker ps
                """
            }
	        }
        }
	    
	 stage('Update LB_Server') {           
            steps {    
              sshagent(['SSH_DockerServer']) {
               
	       //ssh ec2-user@54.89.236.78 "docker ps"
                   sh """      			              
                			
                    ssh ec2-user@54.89.236.78 'bash -s' <<EOF			
			docker ps
    			unstash 'build-artifacts'
	                ls
	                pwd
			docker-compose down			
			
			export TAG=${env.BUILD_NUMBER}
    	                export PORT_TO_RUN=8083
    	                docker-compose up -d                     
    		        docker ps
			EOF
"""
                    
                }
                
            }
        }

    }

}
